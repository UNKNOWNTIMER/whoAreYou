import pygame
import threading
import sys
import os
import time
import random
from RNG.RNG_list import random_game,random_game_element,random_Experience
from api_llama3.chat_preprocessing import extract_and_save_code,extract_info,save_program
from api_llama3.engine_llama3 import client,run_aIgame_in_cmd,game_code,wiki_human,Experience_code,C_RNG_random_game,C_RNG_element,C_RNG_Experience
from RNG.pixelMan import create_pixel_person
from text_QA import QA
#Rebuild a new RNG (Random Number Generator) using the LLM (Language Learning Model) construction library.
def main_menu():
    global RNG_Experience,flag_menu
    flag_menu = 1
    return ["Let me see your recommendation letter!", "Do you have any "+RNG_Experience+" content to share with me?", "I want to test your game development skills","Let me play the game you wrote again!", "Next one"]

def UI_switch():
    global UI_flag,UI_switch_tag,current_menu, current_option,voice_p
    #Whether to integrate the UI of the mini-game generated by LLM into the large model. Switch.
    UI_flag = 1 - UI_flag
    if  UI_flag:
        play_music("coffeeTime_loop")
        UI_switch_tag = "When testing later, do not beautify the UI!"
        voice_p.stop()
        play_voice("UIon")
        print_t("Hmm, I will make the UI look good")
        current_menu = main_menu()
        current_option = 0
    else:
        play_music("coffeeTime_loop")
        UI_switch_tag = "Remember to beautify the UI during testing!"
        voice_p.stop()
        play_voice("UIoff")
        print_t("Alright, I will not beautify the UI")
        current_menu = main_menu()
        current_option = 0
    return
    
def game_again():
    global game_flag,voice_p,UI_flag
    voice_p.stop()
    if not UI_flag or not game_flag:
        play_voice("again")
    if not game_flag:
        print_t("Oh? I haven't written anything yet.")
    else:
        print_t("Got it! Please check the terminal window.")
        play_music("gameTime_loop")
        thread = threading.Thread(target=run_aIgame_in_cmd, args=(client,UI_flag))
        thread.start()
    return

def game_dev_menu():
    global tag_1,tag_2,tag_3,RNG_Experience,random_game_element2,random_game_type2,random_game_element3,random_game_type3,flag_menu
    flag_menu = 0
    #Refresh
    tag_1 = "Since you know a lot about "+RNG_Experience+", then..."
    tag_2 = "Test your ability to write a "+random_game_type2+" type game related to "+random_game_element2+""
    tag_3 = "Then can you help me write a "+random_game_type3+" type game related to "+random_game_element3+"?"
    return [UI_switch_tag,tag_1, tag_2, tag_3, "What else can you think of to write?"]

#Storytelling module
def story():
    global background,voice_p
    voice_p.stop()
    play_voice("Describe")
    print_t("You opened the pixel recommendation letter, and it clearly stated:"+background)
    return

#Share your experience as a programmer
def share_experience():
    global voice_p,client,game_Experience
    voice_p.stop()
    play_voice("showme")
    print_t(game_Experience)
    return
#Program generates program code option 1
def op_1():
    global voice_p,game_flag
    voice_p.stop()
    play_music("gameTime_loop")
    global client,RNG_Experience,random_game_type1,UI_flag,game_flag
    print_t("I wrote a game code about"+RNG_Experience+"and sent it to your terminal.")
    game_flag = 1
    game_txet = game_code(client,RNG_Experience,random_game_type1)
    extract_and_save_code(game_txet, 'extracted_game_code.py')
    thread = threading.Thread(target=run_aIgame_in_cmd, args=(client,UI_flag))
    thread.start() 
    return
#Program generates program code option 2
def op_2():
    global voice_p,game_flag
    voice_p.stop()
    play_music("gameTime_loop")
    global client,random_game_element2,random_game_type2,UI_flag
    print_t("This is a "+random_game_type2+" type game test, please review it")
    game_flag = 1
    game_txet = game_code(client,random_game_element2,random_game_type2)
    extract_and_save_code(game_txet, 'extracted_game_code.py')
    thread = threading.Thread(target=run_aIgame_in_cmd, args=(client,UI_flag))
    thread.start()
    return
#Program generates program code option 3
def op_3():
    global voice_p,game_flag
    voice_p.stop()
    play_music("gameTime_loop")
    global client,random_game_element3,random_game_type3,UI_flag
    print_t("About "+random_game_type3+"? That's my specialty!")
    game_flag = 1
    game_txet = game_code(client,random_game_element3,random_game_type3)
    extract_and_save_code(game_txet, 'extracted_game_code.py')
    thread = threading.Thread(target=run_aIgame_in_cmd, args=(client,UI_flag))
    thread.start()
    return

#Return to Menu
def return_to_main():
    global current_menu, current_option, tag_1, tag_2, tag_3,random_game_type1,random_game_type2,random_game_type3
    global RNG_Experience,random_game_element2,random_game_element3,voice_p,loge_7,loge_8
    current_menu = main_menu()
    current_option = 0
    play_music("coffeeTime_loop")
    voice_p.stop()
    play_voice("interested")
    print_t("Alright, see if there's anything else you're interested in")
    random_game_type1 = random_game()
    random_game_type2 = random_game()
    random_game_type3 = random_game()
    random_game_element2 = random_game_element()
    random_game_element3 = random_game_element()
    loge_7 = pygame.image.load('background\\Skillicon\\L ('+str(random.randint(0,32))+').png')
    loge_8 = pygame.image.load('background\\Skillicon\\L ('+str(random.randint(0,32))+').png')
    return
#Secondary Menu, LLM Game Development Options
def test_game_dev():
    global current_menu, current_option,voice_p,name
    current_menu = game_dev_menu()
    play_music("menu_loop")
    voice_p.stop()
    play_voice("test")
    print_t(name+"looks at you through those few pixelated eyes, full of anticipation...")
    current_option = 0
    return
#Next interviewee
def next_person():
    global second_image_path,result_text,name,age,gender,background,game_flag,b_image,voice_p,RNG_Experience
    global current_menu,game_Experience,loge_1
    os.system('cls')
    voice_p.stop()
    play_voice("next")
    print("###"+name+" has exited the interview software###\n###Establishing connection with the next interviewee, please wait###\n\nAlthough "+name+" showed no expression, you could still catch a hint of reluctance on his 30x30 pixelated face.")
    name, age, gender, background = extract_info(wiki_human(client))
    print_t ("Hello, I am "+name+", from "+QA._country+", and I am "+age+" years old.")
    RNG_Experience = random_Experience()
    #Call the model to generate a character and then generate the response
    game_Experience = Experience_code(client,name,background,RNG_Experience)
    second_image_index = random.randint(0, 99)  # Generate a random number between 1 and 99
    second_image_path = os.path.join(folder_path, f"Transparent_Pixel_Art_Person_{second_image_index}.png")
    b_image = pygame.image.load('background\\BG\\BG_'+str(random.randint(0,7))+'.png') 
    loge_1 = pygame.image.load('background\\Skillicon\\L ('+str(random.randint(0,32))+').png')
    game_flag = 0
    current_menu = main_menu()
    return  
#Used to control Pygame to print dialog
def print_t(result_t):
    global result_text
    result_text = result_t
    text_lines = wrap_text(result_text, 80)
    y_offset = 10  #Line spacing control
    for line in text_lines:
        text_surface = font.render(line, True, (255, 255, 255))
        screen.blit(text_surface, (50, y_offset))
        y_offset += font.get_linesize()
    return
#Automatic line break
def wrap_text(text, chars_per_line):
    lines = []
    while text:
        if len(text) > chars_per_line:
            last_space = text.rfind(' ', 0, chars_per_line)
            if last_space == -1:
                last_space = chars_per_line
            lines.append(text[:last_space].strip())
            text = text[last_space:].strip()
        else:
            lines.append(text)
            break
    return lines

# BGM control function
def play_music(music_file):
    # Stop
    pygame.mixer.music.stop()
    # Load
    pygame.mixer.music.load("music\\"+music_file+".mp3")
    # Play
    pygame.mixer.music.play(-1)
    return
    
# Play character voice
def play_voice(voice_file):
    global voice_p
    # Read different voices
    voice_p = pygame.mixer.Sound("music\\voice\\"+voice_file+"_"+str(random.randint(0,2))+".wav")
    # Play! Play!!
    voice_p.play()
    
    return

if __name__ == "__main__":
    
    # This block is for global variables, since it's Python, and the program isn't too large, we won't save memory and use them directly~ Hehe O(∩_∩)O
    global current_menu, current_option,tag_1,tag_2,tag_3,name, age, gender, background,second_image_path,result_text,random_game_type1,random_game_type2,random_game_type3
    global text_lines,random_game_element1,random_game_element2,random_game_element3,b_image
    global UI_flag,UI_switch_tag,game_flag,button0,button1,voice_p
    global game_Experience,RNG_Experience
    global loge_0,loge_1,loge_2,loge_3,loge_4,loge_5,loge_7,loge_8,loge_9,flag_menu,character_image,face_image,f_out
    f_out = 0
    
    # Generate real RNG main program call, each program will call 4 times, because I think it's not very stable so it's not enabled for now, if someone is really interested, I'll update it
    '''
    while not os.path.exists("generated_data/generated_RNG_type/RNG_random_game.py"):
        save_program(C_RNG_random_game(client), 'RNG_random_game.py')
        time.sleep(1)
        f_out += 1 
        if os.path.exists("generated_data/generated_RNG_type/RNG_random_game.py") or f_out == 4:
            print("File has been successfully created.")
            break
    f_out = 0      
    while not os.path.exists("generated_data/generated_RNG_type/RNG_random_game_element.py"):
        save_program(C_RNG_element(client), 'RNG_random_game_element.py')
        time.sleep(1)
        f_out += 1
        if os.path.exists("generated_data/generated_RNG_type/RNG_random_game_element.py" or f_out == 4):
            print("File has been successfully created.")
            break
    f_out = 0
    while not os.path.exists("generated_data/generated_RNG_type/RNG_random_Experience.py"):
        save_program(C_RNG_Experience(client), 'RNG_random_Experience.py')
        time.sleep(1) 
        f_out += 1
        if os.path.exists("generated_data/generated_RNG_type/RNG_random_Experience.py" or f_out == 4):
            print("File has been successfully created.")
            break
            
    # Generated code import program
    from  generated_data.generated_RNG_type.RNG_random_game import random_game
    from  generated_data.generated_RNG_type.RNG_random_game_element import random_game_element
    from  generated_data.generated_RNG_type.RNG_random_Experience import random_Experience
    '''
    
    # Clear the startup information   
    os.system('cls')
    print("\n%%%%%%%%%%%%%%%%%%%The other party is connecting remotely%%%%%%%%%%%%%%%%%%%")
    # Call the character information generated by the model
    name, age, gender, background = extract_info(wiki_human(client))
    # Call random parameter save
    RNG_Experience = random_Experience()
    # Call the character generated by the model to regenerate the response
    game_Experience = Experience_code(client,name,background,RNG_Experience)
    # Initialize global setting switches
    UI_flag = 1# Whether to enable LLM for beautifying the program written by LLM model
    flag_menu = 1# Check if it is in the main menu or submenu
    game_flag = 0# Check if the extrated_game_code.py game code file has been generated
    
    # Initialize pygame
    pygame.init()
    pygame.mixer.init()
    
    # Set the pygame window to no frame
    #flags = pygame.NOFRAME
    # Border size
    screen_width = 800
    screen_height = 500
    # Initialize images
    icon = pygame.image.load('background\\TIMER.png')
    b_image = pygame.image.load('background\\BG\\BG_'+str(random.randint(0,7))+'.png') 
    loge_0 = pygame.image.load('background\\Skillicon\\L_M00.png')
    loge_1 = pygame.image.load('background\\Skillicon\\L ('+str(random.randint(0,32))+').png')
    loge_2 = pygame.image.load('background\\Skillicon\\L_M02.png')
    loge_3 = pygame.image.load('background\\Skillicon\\L_M03.png')
    loge_4 = pygame.image.load('background\\Skillicon\\L_M04.png')
    loge_5 = pygame.image.load('background\\Skillicon\\L_M05.png')
    loge_7 = pygame.image.load('background\\Skillicon\\L ('+str(random.randint(0,32))+').png')
    loge_8 = pygame.image.load('background\\Skillicon\\L ('+str(random.randint(0,32))+').png')
    loge_9 = pygame.image.load('background\\Skillicon\L_M01.png')
    # logo TIMER
    pygame.display.set_icon(icon)
    # Screen initialization
    screen = pygame.display.set_mode((screen_width, screen_height))#,flags)
    # Set window title
    pygame.display.set_caption('WhoAreYou')
    
    # Set colors
    black = (0, 0, 0)
    white = (255, 255, 255)
    # Load font, specify black body
    font_path = 'text_QA\\hzk-pixel-12px.ttf'  # Typical path for black body in Windows
    font = pygame.font.Font(font_path, 16)   # pixelMan initialization and run, folder path
    # Initialize music
    play_music("coffeeTime_loop")
    button0 = pygame.mixer.Sound("music/button/down_up.wav")
    button1 = pygame.mixer.Sound("music/button/enter.wav")
    # Pixel person generation check
    folder_path = "generated_data/pixelMan"
    if not os.path.exists(folder_path):
        os.makedirs(folder_path)  # Create folder if it doesn't exist
    print("\n%%%%%%%%%%%%%%%%%%%The other party is quickly typing a reply%%%%%%%%%%%%%%%%%%%")
    if len(os.listdir(folder_path)) == 0:
        print("\n%%%%%%%%%%%%%%%The interviewee is a bit nervous for the first interview and is currently getting ready%%%%%%%%%%%%%%%")
        # If the folder is empty, generate 100 pictures
        for i in range(100):
            img = create_pixel_person()
            img.save(os.path.join(folder_path, f"Transparent_Pixel_Art_Person_{i}.png"))
    # Load only the first sequence picture
    character_image = pygame.image.load('background\\Eily\\body\\Eily_body_'+str(random.randint(0,19))+'.png')
    character_image = pygame.transform.scale(character_image, (200, 200))  # Adjust image size
    face_image = pygame.image.load('background\\Eily\\face\\Eily_face_'+str(random.randint(0,19))+'.png')
    face_image = pygame.transform.scale(face_image, (200, 200))  # Adjust image size
    # Randomly load the second picture
    second_image_index = random.randint(0, 99)  # Generate a random number from 1 to 99
    second_image_path = os.path.join(folder_path, f"Transparent_Pixel_Art_Person_{second_image_index}.png")
    second_image = pygame.image.load(second_image_path)
    second_image = pygame.transform.scale(second_image, (200, 200))
    # Initialize sub-options
    random_game_type1 = random_game()
    random_game_type2 = random_game()
    random_game_type3 = random_game()
    random_game_element2 = random_game_element()
    random_game_element3 = random_game_element()
    tag_1 = "Since you know a lot about "+RNG_Experience+", then..."
    tag_2 = "Test your ability to write a "+random_game_type2+" type game related to "+random_game_element2+""
    tag_3 = "Then can you help me write a "+random_game_type3+" type game related to "+random_game_element3+"?"
    UI_switch_tag = "Remember not to beautify the UI during testing!"
    # Display result text
    result_text ="Hello, I am "+name+", from "+QA._country+", and I am "+age+" years old."
    current_menu = main_menu()
    current_option = 0
    running = True
    print("\n%%%The other party tapped the microphone lightly, reminding you that the whoAreYou remote interview software is open. Please click to switch the window.%%%")
    play_voice("hello")
    while running:
        # Option system, containing all options, used to call functions.
        menu_functions = {
            "Let me see your recommendation letter!": story,
            "Do you have any "+RNG_Experience+" content to share with me?": share_experience,
            "I want to test your game development skills": test_game_dev,
            "Let me play the game you wrote again!":game_again,
            "Next one": next_person,
            UI_switch_tag: UI_switch,
            tag_1: op_1,
            tag_2: op_2,
            tag_3: op_3,
            "What else can you think of to write?": return_to_main
        }
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_UP:
                    current_option = (current_option - 1) % len(current_menu) # Up?
                    button0.play()
                elif event.key == pygame.K_DOWN:
                    current_option = (current_option + 1) % len(current_menu) # Down!
                    button0.play()
                elif event.key == pygame.K_RETURN:
                    menu_functions[current_menu[current_option]]() # Enter
                    button1.play()
                    # Refresh character
                    character_image = pygame.image.load('background\\Eily\\body\\Eily_body_'+str(random.randint(0,19))+'.png')
                    character_image = pygame.transform.scale(character_image, (200, 200))  # Adjust image size
                    face_image = pygame.image.load('background\\Eily\\face\\Eily_face_'+str(random.randint(0,19))+'.png')
                    face_image = pygame.transform.scale(face_image, (200, 200))  # Adjust image size
                elif event.key == pygame.K_ESCAPE:  # Press ESC key to exit
                    running = False          
        screen.fill((0, 0, 0))
        for idx, option in enumerate(current_menu):
            color = (255, 255, 255) if idx == current_option else (100, 100, 100)
            option_surface = font.render(option, True, color)
            screen.blit(option_surface, (50, 50 + idx * 50))
        # Fill background color
        screen.fill(black)
        screen.blit(b_image,(0, 0))
        if flag_menu:
            if current_option == 0:
                screen.blit(loge_0,(455 , 265))
            elif current_option == 1:
                screen.blit(loge_1,(455 , 305))
            elif current_option == 2:
                screen.blit(loge_2,(455 , 345))
            elif current_option == 3:
                screen.blit(loge_3,(455 , 385))
            elif current_option == 4:
                screen.blit(loge_4,(455 , 425))
        else:
            if current_option == 0:
                screen.blit(loge_5,(455 , 265))
            elif current_option == 1:                
                screen.blit(loge_1,(455 , 305))
            elif current_option == 2:                
                screen.blit(loge_7,(455 , 345))
            elif current_option == 3:                
                screen.blit(loge_8,(455 , 385))
            elif current_option == 4:                
                screen.blit(loge_9,(455 , 425))
        # Display of body and face
        screen.blit(character_image, (0, screen_height - character_image.get_height() - 10))
        # Haha, facial jitter expressions, if you don't like it, remove random.randint(-3,3)~
        screen.blit(face_image, (random.randint(-3,3), screen_height - face_image.get_height() - 10))
        # Generated character in the upper right corner
        screen.blit(second_image, (screen_width - second_image.get_width() + 20, 20))
        # Display middle option system
        for idx, option in enumerate(current_menu):
            option_surface = font.render(option, True, white if idx == current_option else (100, 100, 100))
            screen.blit(option_surface, (screen_width // 1.7 - option_surface.get_width() // 2, screen_height // 1.6 + idx * 40 - 20))
        second_image = pygame.image.load(second_image_path)
        second_image = pygame.transform.scale(second_image, (200, 200))
        # Auto line wrap function
        print_t(result_text)
        pygame.display.flip()
        # Exit pygame
    pygame.quit()
    sys.exit()
