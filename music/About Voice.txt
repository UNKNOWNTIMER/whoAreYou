#VOICE is designated for future expansion into the generation area. Currently, it uses a caching method; after generation, it will be integrated into the program in a structured way. In the future, VOICE will be unstructured when time permits.
Example of the thought process:
First, provide a sample of the voice tone.

%%% Can be included in the QA framework part for LLM calls %%%

Beautify the game interface - Translate and provide three different texts: one more - colloquial -, one more - academic -, and one more - playful -
%%% Variable part generated by the program %%%
ChatGPT:
Here is the translation for "Beautify the game interface" in three different styles:
Colloquial version:
"Let's spruce up the game interface!"
Academic version:
"Proceed with the enhancement of the graphical user interface for the game."
Playful version:
"Time to give our game face a fabulous makeover!"
User: Give me 3 more

ChatGPT:
Of course! Here are three more styles:

Concise version:
"Upgrade the game interface."
Action-oriented version:
"Let's beautify the game's look!"
Descriptive version:
"Transform the visual presentation of the game interface to enhance player engagement."
It can be seen that this natural language is highly structured.
Equivalent to:
"String to be translated" Do what (description) Provide how many, then what types
This means natural language programming is highly compatible.

Then store the generated text in a string array.
Connect to SCV, TTS, or other voice models to generate the voice.

Next, replace the voice in the structured program's reserved positions. Thus, when the program reads it, the voice changes with the game options.

The game's theme music follows the same principle, being reserved first and then generated in a LOOP type.

All content in the music library is generated by natural language.